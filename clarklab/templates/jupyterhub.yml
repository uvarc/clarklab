apiVersion: apps/v1
kind: Deployment
metadata:
  name: jupyterhub-deployment
  namespace: clarklab
  labels:
    app: jupyterhub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyterhub
  template:
    metadata:
      labels:
        app: jupyterhub
    spec:
#      initContainers:
#      - name: set-data-dir-ownership
#        image: alpine:3
#        # Give `jovyan` user (id 1000) permissions a mounted volume
#        command:
#        - chown
#        - -R
#        - 1000:100
#        - /home/jovyan/work
#        resources:
#          requests:
#            memory: "1024Mi"
#            cpu: "100m"
#          limits:
#            memory: "2024Mi"
#            cpu: "200m"
#        volumeMounts:
#          - mountPath: "/home/jovyan/work"
#            name: notebook-storage
      containers:
      - name: jupyterhub
        image: jupyter/datascience-notebook
        command: 
        - "start-notebook.sh"
        - "--ServerApp.ip='*'"
        - "--ServerApp.allow_remote_access=True"
        - "--ServerApp.port=8888"
        - "--ServerApp.open_browser=False"
        - "--NotebookApp.allow_origin='https://jupyterhub.fairscape.pods.uvarc.io'"
        ports:
        - name: http
          containerPort: 8888
        securityContext:
          # jovyan uid 1000
          runAsUser: 1000 
          # jovyan gid 100
          runAsGroup: 100
          # allow jovyan to sudo
          allowPrivilegeEscalation: true
        env:
        {{- range $envVar := .Values.fairscapeConfig.env}}
          - name: {{ $envVar.name | quote }}
            value: {{ $envVar.value | quote }}
        {{- end }}
        {{- range $secret := .Values.fairscapeConfig.secrets }}
          - name: {{ $secret.name | quote }}
            valueFrom:
              secretKeyRef:
                name: {{ $secret.valueFrom.secretKeyRef.name | quote }}
                key: {{ $secret.valueFrom.secretKeyRef.key | quote }} 
        {{- end }}
        # allow jovyan to sudo
        - name: GRANT_SUDO
          value: "yes" 
        resources:
          requests:
            memory: "3024Mi"
            cpu: "100m"
          limits:
            memory: "5024Mi"
            cpu: "300m"
#        volumeMounts:
#        - mountPath: "/home/jovyan/work"
#          name: notebook-storage
#      #  - mountPath: "/home/jovyan/project"
#      #    name: nfs-project-storage
      serviceAccountName: fairscape-sa 
#      volumes:
#      #- name: nfs-project-storage 
#      #  nfs:
#      #    server: "qumulo.rc.virginia.edu"
#      #    path: "/clarklab"
#      - name: notebook-storage
#        persistentVolumeClaim:
#          claimName: jupyterhub-storage
---
apiVersion: v1
kind: Service
metadata:
  name: jupyterhub-service
  namespace: clarklab
spec:
  selector:
    app: jupyterhub
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8888
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: jupyterhub-storage
#  namespace: clarklab
#spec:
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: 10Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    acme.cert-manager.io/http01-edit-in-place: "true"
# annotations for jupyterhub websockets
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.org/websocket-services: "jupyterhub-service"
    cert-manager.io/cluster-issuer: letsencrypt-cluster-issuer
  name: jupyterhub-fairscape-ingress
  namespace: clarklab
spec:
  rules:
    - host: jupyterhub.fairscape.pods.uvarc.io
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: jupyterhub-service
                port:
                  number: 80 
    # This section is only required if TLS is to be enabled for the Ingress
  tls:
      - hosts:
          - jupyterhub.fairscape.pods.uvarc.io
        secretName: jupyterhub-fairscape-nginx-tls-ingress-secret
